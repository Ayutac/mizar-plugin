{
  parserClass="org.abos.mizar.mizarplugin.MizarParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Mizar"
  psiImplClassSuffix="Impl"
  psiPackage="org.abos.mizar.mizarplugin.psi"
  psiImplPackage="org.abos.mizar.mizarplugin.psi.impl"

  elementTypeHolderClass="org.abos.mizar.mizarplugin.psi.MizarTypes"
  elementTypeClass="org.abos.mizar.mizarplugin.psi.MizarElementType"
  tokenTypeClass="org.abos.mizar.mizarplugin.psi.MizarTokenType"
  tokens=[
    PEQ=".="
    EQ="="
    SEMI=";"
    COLON=":"
    COMMA=","
    AMP="&"
    DOTS="..."
    LS="(#"
    RS="#)"
    LP="("
    RP=")"
    LB="["
    RB="]"
    LC="{"
    RC="}"
    RA="->"

    space="regexp:\s+"
    comment="regexp:::.*"

    ENVIRON="environ"
    VOCABULARIES="vocabularies"
    NOTATIONS="notations"
    CONSTRUCTORS="constructors"
    REGISTRATIONS="registrations"
    DEFINITIONS="definitions"
    EXPANSIONS="expansions"
    EQUALITIES="equalities"
    THEOREMS="theorems"
    SCHEMES="schemes"
    REQUIREMENTS="requirements"

    BEGIN="begin"
    RESERVE="reserve"
    FOR="for"
    DEFINITION_="definition"
    REDEFINE="redefine"
    REGISTRATION="registration"
    CLUSTER="cluster"
    IDENTIFY="identify"
    WITH="with"
    WHEN="when"
    REDUCE="reduce"
    TO="to"
    NOTATION="notation"
    END="end"
    THEOREM_="theorem"
    PROOF_="proof"
    SCHEME="scheme"
    PROVIDED="provided"
    STRUCT="struct"
    OVER="over"
    MODE="mode"
    FUNC="func"
    PRED="pred"
    ATTR="attr"
    MEANS="means"
    IS="is"
    ARE="are"
    OTHERWISE="otherwise"
    EQUALS="equals"
    SYNONYM="synonym"
    SYNONYM="antonym"
    SETHOOD="sethood"
    COMMUTATIVITY="commutativity"
    IDEMPOTENCE="idempotence"
    INVOLUTIVENESS="involutiveness"
    PROJECTIVITY="projectivity"
    SYMMETRY="symmetry"
    ASYMMETRY="asymmetry"
    CONNECTEDNESS="connectedness"
    REFLEXIVITY="reflexivity"
    IRREFLEXIVITY="irreflexivity"
    CORRECTNESS="correctness"
    EXISTENCE="existence"
    UNIQUENESS="uniqueness"
    COHERENCE="coherence"
    COMPATIBILITY="compatibility"
    CONSISTENCY="consistency"
    REDUCIBILITY="reducibility"
    DEFFUNC="deffunc"
    DEFPRED="defpred"
    IF="if"
    OF="of"
    NON="non"
    LET="let"
    SUCH="such"
    SET="set"
    AND="and"
    OR="or"
    IFF="iff"
    IMPLIES="implies"
    NOT="not"
    EX="ex"
    ST="st"
    THEN="then"
    PER="per"
    CASES="cases"
    SUPPOSE_="suppose"
    CASE_="case"
    ASSUME="assume"
    THAT="that"
    GIVEN="given"
    CONSIDER="consider"
    RECONSIDER="reconsider"
    TAKE="take"
    AS="as"
    BY="by"
    FROM="from"
    DEF="def"
    SCH="sch"
    THUS="thus"
    HENCE="hence"
    HEREBY="hereby"
    NOW="now"
    THESIS="thesis"
    CONTRADICTION="contradiction"
    BE="be"
    BEING="being"
    DO="do"
    DOES="does"
    HOLDS="holds"
    THE="the"
    ALL="all"
    QUA="qua"
    IT="it"
    WHERE="where"

    filename="regexp:[A-Z][A-Z_0-9]{2,7}"
    number="regexp:[1-9]\d*"
    var="regexp:\$[1-9]|\$10"
    id="regexp:\w+"
    symbol="regexp:[!\"#%&'*+\-./<=>?@\[\]\\^_`{}~\w]+"
  ]
}

Article ::= Environment-Declaration Text-Proper
Environment-Declaration ::= ENVIRON Directive*
Directive ::= Vocabulary-Directive | Library-Directive | Requirement-Directive
Vocabulary-Directive ::= VOCABULARIES Vocabulary-Name ("," Vocabulary-Name)* ";"
Vocabulary-Name ::= filename
Library-Directive ::= (NOTATIONS | CONSTRUCTORS | REGISTRATIONS | DEFINITIONS | EXPANSIONS | EQUALITIES | THEOREMS | SCHEMES) Article-Name ("," Article-Name)* ";"
Article-Name ::= filename
Requirement-Directive ::= REQUIREMENTS Requirement ("," Requirement)* ";"
Requirement ::= filename
Text-Proper ::= Section+
Section ::= BEGIN Text-Item*
Text-Item ::= Reservation | Definitional-Item | Registration-Item | Notation-Item | Theorem | Scheme-Item | Auxiliary-Item
Reservation ::= RESERVE Reservation-Segment ("," Reservation-Segment)* ";"
Reservation-Segment ::= Reserved-Identifiers FOR Type-Expression
Reserved-Identifiers ::= id ("," id)
Definitional-Item ::= Definitional-Block ";"
Registration-Item ::= Registration-Block ";"
Notation-Item ::= Notation-Block ";"
Definitional-Block ::= DEFINITION_ (Definition-Item | Definition | Redefinition)* END
Registration-Block ::= REGISTRATION (Loci-Declaration | Cluster-Registration | Identify-Registration | Property-Registration | Reduction-Registration | Auxiliary-Item)* END
Notation-Block ::= NOTATION (Loci-Declaration | Notation-Declaration)* END
Definition-Item ::= Loci-Declaration | Permissive-Assumption | Auxiliary-Item
Notation-Declaration ::= Attribute-Synonym | Attribute-Antonym | Functor-Synonym | Mode-Synonym | Predicate-Synonym | Predicate-Antonym
Loci-Declaration ::= LET Qualified-Variables (SUCH Conditions)? ";"
Permissive-Assumption ::= Assumption
Definition ::= Structure-Definition | Mode-Definition | Functor-Definition | Predicate-Definition | Attribute-Definition
Redefinition ::= REDEFINE ( Mode-Definition | Functor-Definition | Predicate-Definition | Attribute-Definition )
Structure-Definition ::= STRUCT ("(" Ancestors ")")? Structure-Symbol (OVER Loci)? "(#" Fields "#)" ";"
Ancestors ::= Structure-Type-Expression ("," Structure-Type-Expression)* {pin(".*")=1}
Structure-Symbol ::= symbol
Loci ::= Locus ("," Locus)*
Fields ::= Field-Segment ("," Field-Segment)* {pin(".*")=1}
Locus ::= Variable-Identifier
Variable-Identifier ::= id
Field-Segment ::= Selector-Symbol ("," Selector-Symbol)* Specification {pin(".*")=1}
Selector-Symbol ::= symbol
Specification ::= "->" Type-Expression
Mode-Definition ::= MODE Mode-Pattern ( Specification? (MEANS Definiens)? ";" Correctness-Conditions | IS Type-Expression ";" ) Mode-Property*
Mode-Pattern ::= Mode-Symbol (OF Loci)?
Mode-Symbol ::= symbol | SET
Mode-Synonym ::= SYNONYM Mode-Pattern FOR Mode-Pattern ";"
Definiens ::= Simple-Definiens | Conditional-Definiens
Simple-Definiens ::= (":" Label-Identifier ":")? ( Sentence | Term-Expression )
Label-Identifier ::= id
Conditional-Definiens ::= (":" Label-Identifier ":")? Partial-Definiens-List (OTHERWISE ( Sentence | Term-Expression ))?
Partial-Definiens-List ::= Partial-Definiens ("," Partial-Definiens)* {pin(".*")=1}
Partial-Definiens ::= ( Sentence | Term-Expression ) IF Sentence
Mode-Property ::= SETHOOD Justification ";"
Functor-Definition ::= FUNC Functor-Pattern Specification? (( MEANS | EQUALS ) Definiens)? ";" Correctness-Conditions Functor-Property*
Functor-Pattern ::= Functor-Loci? Functor-Symbol Functor-Loci? | Left-Functor-Bracket Loci Right-Functor-Bracket
Functor-Property ::= (COMMUTATIVITY | IDEMPOTENCE | INVOLUTIVENESS | PROJECTIVITY) Justification ";"
Functor-Synonym ::= SYNONYM Functor-Pattern FOR Functor-Pattern ";"
Functor-Loci ::= Locus | "(" Loci ")"
Functor-Symbol ::= symbol
Left-Functor-Bracket ::= symbol | "{" | "["
Right-Functor-Bracket ::= symbol | "}" | "]"
Predicate-Definition ::= PRED Predicate-Pattern (MEANS Definiens)? ";" Correctness-Conditions Predicate-Property*
Predicate-Pattern ::= Loci? Predicate-Symbol Loci?
Predicate-Property ::= (SYMMETRY | ASYMMETRY | CONNECTEDNESS | REFLEXIVITY | IRREFLEXIVITY) Justification ";"
Predicate-Synonym ::= SYNONYM Predicate-Pattern FOR Predicate-Pattern ";"
Predicate-Antonym ::= ANTONYM Predicate-Pattern FOR Predicate-Pattern ";"
Predicate-Symbol ::= symbol | "="
Attribute-Definition ::= ATTR Attribute-Pattern MEANS Definiens ";" Correctness-Conditions
Attribute-Pattern ::= Locus IS Attribute-Loci? Attribute-Symbol
Attribute-Synonym ::= SYNONYM Attribute-Pattern FOR Attribute-Pattern ";"
Attribute-Antonym ::= ANTONYM Attribute-Pattern FOR Attribute-Pattern ";"
Attribute-Symbol ::= symbol
Attribute-Loci ::= Loci | "(" Loci ")"
Cluster-Registration ::= Existential-Registration | Conditional-Registration | Functorial-Registration
Existential-Registration ::= CLUSTER Adjective-Cluster? FOR Type-Expression ";" Correctness-Conditions
Adjective-Cluster ::= Adjective+
Adjective ::= NON? Adjective-Arguments? Attribute-Symbol
Conditional-Registration ::= CLUSTER Adjective-Cluster? "->" Adjective-Cluster? FOR Type-Expression ";" Correctness-Conditions
Functorial-Registration ::= CLUSTER Term-Expression "->" Adjective-Cluster? (FOR Type-Expression)? ";" Correctness-Conditions
Identify-Registration ::= IDENTIFY Functor-Pattern WITH Functor-Pattern (WHEN Locus "=" Locus ("," Locus "=" Locus)*)? ";" Correctness-Conditions
Property-Registration ::= SETHOOD OF Type-Expression Justification ";"
Reduction-Registration ::= REDUCE Term-Expression TO Term-Expression ";" Correctness-Conditions
Correctness-Conditions ::= Correctness-Condition* (CORRECTNESS Justification ";")?
Correctness-Condition ::= (EXISTENCE | UNIQUENESS | COHERENCE | COMPATIBILITY | CONSISTENCY | REDUCIBILITY) Justification ";"
Theorem ::= THEOREM_ Compact-Statement
Scheme-Item ::= Scheme-Block ";"
Scheme-Block ::= SCHEME Scheme-Identifier "{" Scheme-Parameters "}" ":" Scheme-Conclusion (PROVIDED Scheme-Premise (AND Scheme-Premise)*)? ( PROOF_ | ";" ) Reasoning END
Scheme-Identifier ::= id
Scheme-Parameters ::= Scheme-Segment ("," Scheme-Segment)* {pin(".*")=1}
Scheme-Conclusion ::= Sentence
Scheme-Premise ::= Proposition
Scheme-Segment ::= Predicate-Segment | Functor-Segment
Predicate-Segment ::= Predicate-Identifier ("," Predicate-Identifier)* "[" Type-Expression-List? "]" {pin(".*")=1}
Predicate-Identifier ::= id
Functor-Segment ::= Functor-Identifier ("," Functor-Identifier)* "(" Type-Expression-List? ")" Specification {pin(".*")=1}
Functor-Identifier ::= id
Auxiliary-Item ::= Statement | Private-Definition
Private-Definition ::= Constant-Definition | Private-Functor-Definition | Private-Predicate-Definition
Constant-Definition ::= SET Equating-List ";"
Equating-List ::= Equating ("," Equating)* {pin(".*")=1}
Equating ::= Variable-Identifier "=" Term-Expression
Private-Functor-Definition ::= DEFFUNC Private-Functor-Pattern "=" Term-Expression ";"
Private-Predicate-Definition ::= DEFPRED Private-Predicate-Pattern MEANS Sentence ";"
Private-Functor-Pattern ::= Functor-Identifier "(" Type-Expression-List? ")"
Private-Predicate-Pattern ::= Predicate-Identifier "[" Type-Expression-List? "]"
Reasoning ::= Reasoning-Item* (THEN? PER CASES Simple-Justification ";" ( Case-List | Suppose-List ))?
Case-List ::= Case+
Case ::= CASE_ ( Proposition | Conditions ) ";" Reasoning END ";"
Suppose-List ::= Suppose+
Suppose ::= SUPPOSE_ ( Proposition | Conditions ) ";" Reasoning END ";"
Reasoning-Item ::= Auxiliary-Item | Skeleton-Item
Skeleton-Item ::= Generalization | Assumption | Conclusion | Exemplification
Generalization ::= LET Qualified-Variables (SUCH Conditions)? ";"
Assumption ::= Single-Assumption | Collective-Assumption | Existential-Assumption
Single-Assumption ::= ASSUME Proposition ";"
Collective-Assumption ::= ASSUME Conditions ";"
Existential-Assumption ::= GIVEN Qualified-Variables (SUCH Conditions)? ";"
Conclusion ::= (THUS | HENCE) ( Compact-Statement | Iterative-Equality ) | Diffuse-Conclusion
Diffuse-Conclusion ::= THUS Diffuse-Statement | HEREBY Reasoning END ";"
Exemplification ::= TAKE Example ("," Example)* ";"
Example ::= Term-Expression | Variable-Identifier "=" Term-Expression
Statement ::= THEN? Linkable-Statement | Diffuse-Statement
Linkable-Statement ::= Compact-Statement | Choice-Statement | Type-Changing-Statement | Iterative-Equality
Compact-Statement ::= Proposition Justification ";"
Choice-Statement ::= CONSIDER Qualified-Variables SUCH Conditions Simple-Justification ";"
Type-Changing-Statement ::= RECONSIDER Type-Change-List AS Type-Expression Simple-Justification ";"
Type-Change-List ::= ( Equating | Variable-Identifier ) ("," ( Equating | Variable-Identifier ))* {pin(".*")=1}
Iterative-Equality ::= (Label-Identifier ":")? Term-Expression "=" Term-Expression Simple-Justification (".=" Term-Expression Simple-Justification)+ ";"
Diffuse-Statement ::= (Label-Identifier ":")? NOW Reasoning END ";"
Justification ::= Proof | Simple-Justification
Simple-Justification ::= Scheme-Justification | Straightforward-Justification
Proof ::= PROOF_ Reasoning END
Straightforward-Justification ::= (BY References_)?
Scheme-Justification ::= FROM Scheme-Reference ("(" References_ ")")?
References_ ::= Reference ("," Reference)* {pin(".*")=1}
Reference ::= Local-Reference | Library-Reference
Scheme-Reference ::= Local-Scheme-Reference | Library-Scheme-Reference
Local-Reference ::= Label-Identifier
Local-Scheme-Reference ::= Scheme-Identifier
Library-Reference ::= Article-Name ":" ( Theorem-Number | DEF Definition-Number ) ("," ( Theorem-Number | DEF Definition-Number ))*
Library-Scheme-Reference ::= Article-Name ":" SCH Scheme-Number
Theorem-Number ::= number
Definition-Number ::= number
Scheme-Number ::= number
Conditions ::= THAT Proposition (AND Proposition)*
Proposition ::= (Label-Identifier ":")? Sentence
Sentence ::= Formula-Expression
Formula-Expression ::= "(" Formula-Expression ")" | Atomic-Formula-Expression | Quantified-Formula-Expression | Formula-Expression "&" Formula-Expression | Formula-Expression "&" "..." "&" Formula-Expression | Formula-Expression OR Formula-Expression | Formula-Expression OR "..." OR Formula-Expression | Formula-Expression IMPLIES Formula-Expression | Formula-Expression IFF Formula-Expression | NOT Formula-Expression | CONTRADICTION | THESIS
Atomic-Formula-Expression ::= Term-Expression-List? (( DOES | DO ) NOT)? Predicate-Symbol Term-Expression-List? ((( DOES | DO ) NOT)? Predicate-Symbol Term-Expression-List)* | Predicate-Identifier "[" Term-Expression-List? "]" | Term-Expression IS Adjective+ | Term-Expression IS Type-Expression
Quantified-Formula-Expression ::= FOR Qualified-Variables (ST Formula-Expression)? ( HOLDS Formula-Expression | Quantified-Formula-Expression ) | EX Qualified-Variables ST Formula-Expression
Qualified-Variables ::= Explicitly-Qualified-Variables | Explicitly-Qualified-Variables "," Implicitly-Qualified-Variables | Implicitly-Qualified-Variables
Implicitly-Qualified-Variables ::= Variables
Explicitly-Qualified-Variables ::= Qualified-Segment ("," Qualified-Segment)* {pin(".*")=1}
Qualified-Segment ::= Variables Qualification
Variables ::= Variable-Identifier ("," Variable-Identifier)* {pin(".*")=1}
Qualification ::= ( BEING | BE ) Type-Expression
Type-Expression ::= Adjective-Cluster? "(" Radix-Type ")" | Adjective-Cluster? Radix-Type
Structure-Type-Expression ::= "(" Structure-Symbol (OVER Term-Expression-List)? ")" | Adjective-Cluster Structure-Symbol (OVER Term-Expression-List)?
Radix-Type ::= Mode-Symbol (OF Term-Expression-List)? | Structure-Symbol (OVER Term-Expression-List)?
Type-Expression-List ::= Type-Expression ("," Type-Expression)*
Term-Expression ::= "(" Term-Expression ")" | Arguments? Functor-Symbol Arguments? | Left-Functor-Bracket Term-Expression-List Right-Functor-Bracket | Functor-Identifier "(" Term-Expression-List? ")" | Structure-Symbol "(#" Term-Expression-List "#)" | THE Structure-Symbol OF Term-Expression | Variable-Identifier | "{" Term-Expression Post-Qualification* ":" Sentence "}" | THE SET OF ALL Term-Expression Post-Qualification* | number | Term-Expression QUA Type-Expression | THE Selector-Symbol OF Term-Expression | THE Selector-Symbol | THE Type-Expression | Private-Definition-Parameter | IT
Arguments ::= Term-Expression | "(" Term-Expression-List ")"
Adjective-Arguments ::= Term-Expression-List | "(" Term-Expression-List ")"
Term-Expression-List ::= Term-Expression ("," Term-Expression)*
Post-Qualification ::= WHERE Post-Qualifying-Segment ("," Post-Qualifying-Segment)*
Post-Qualifying-Segment ::= Post-Qualified-Variable ("," Post-Qualified-Variable)* (( IS | ARE ) Type-Expression)?
Post-Qualified-Variable ::= id
Private-Definition-Parameter ::= var